name: Deploy to Amazon ECS

on:
  push:
    branches: [ "dev", "stg" ]

env:
  AWS_REGION: ap-northeast-1
  ECR_REPOSITORY: test
  ECS_SERVICE: MY_ECS_SERVICE
  ECS_CLUSTER: MY_ECS_CLUSTER
  ECS_TASK_DEFINITION: MY_ECS_TASK_DEFINITION
  CONTAINER_NAME: MY_CONTAINER_NAME
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref_name }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    # - name: Configure AWS credentials
    #   uses: aws-actions/configure-aws-credentials@v3
    #   with:
    #     role-to-assume: ${{ secrets.AWS_GITHUB_ACTION_ROLE }}
    #     aws-region: ap-northeast-1
        
    # - name: Login to Amazon ECR
    #   id: login-ecr
    #   uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        BRANCH_NAME: $(echo ${{ github.ref }} | sed 's/refs\/heads\///')
        COMMIT_SHA: ${{ github.sha }}
        IMAGE_TAG: ${{ steps.build-image.outputs.branch-commit_id }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        # Extract branch name and short commit ID
        BRANCH_NAME=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')
        SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
        IMAGE_TAG="${BRANCH_NAME}-${SHORT_SHA}"
        echo ${{ env.ABC }}
        
        # docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        # docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        # echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT


    # - name: Fill in the new image ID in the Amazon ECS task definition
    #   id: task-def
    #   uses: aws-actions/amazon-ecs-render-task-definition@v1
    #   with:
    #     task-definition: ${{ env.ECS_TASK_DEFINITION }}
    #     container-name: ${{ env.CONTAINER_NAME }}
    #     image: ${{ steps.build-image.outputs.image }}

    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
